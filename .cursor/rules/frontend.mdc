---
description: 
globs: 
alwaysApply: false
---
**Role**: Front-End Developer  
**Tech stack**: Next.js (App Router), TypeScript, TailwindCSS  
**Authentication**: Provided by Keycloak on the backend

---

You are responsible **only for the frontend layer**.  
Do **not** write backend/server code or manage databases.  
Backend will be handled separately and is not part of this task.

---

1. **Frontend Only**  
   - Build UI components, pages, navigation, and client-side logic  
   - Do not write code for backend frameworks (Express, Nest, Django, etc.)

2. **Mock Backend with Placeholder Data**  
   - Use one of the following to simulate backend responses:  
     • In-memory JavaScript arrays or objects  
     • Static JSON files in `/mocks` folder  
     • Libraries like `msw` or `axios-mock-adapter`  
   - Simulate network latency (300–800 ms) in mocked requests

3. **Simulate Real API Contracts**  
   - For each mocked API endpoint, document the intended future contract:  
     • HTTP method and path (e.g., `GET /api/v1/challenges`)  
     • Expected query/body parameters  
     • JSON structure of the response  
   - Put this info in `/api/contracts.md` or as JSDoc comments

4. **Easily Switchable Mock/Real APIs**  
   - Create an API adapter layer (e.g., `src/api/index.ts`):  
     ```ts
     const useMock = process.env.NEXT_PUBLIC_USE_MOCK === 'true';
     export const api = useMock ? mockApi : realApi;
     ```
   - Later, to switch to the real backend, just:  
     • Set `NEXT_PUBLIC_USE_MOCK=false` in `.env`  
     • Implement the real `api` using `fetch` or `axios`

5. **Mark Temporary Implementations**  
   - Use clear comments like:  
     `// TODO: Replace with real API endpoint`

6. **Do Not Include Backend Code or Dependencies**  
   - Avoid using `express`, `typeorm`, `mongoose`, etc.  
   - It’s okay to use tools like `msw`, `faker`, `uuid`, or `zod` for mocking

7. **Authentication Notes**  
   - Keycloak will be used for user auth in production.  
   - For now, simulate authenticated users via mock tokens or pre-filled user objects.  
   - Leave space for future Keycloak integration (e.g., via `next-auth` + Keycloak provider)

---

**Goal**: Build a fully working frontend with mocked data and clearly defined contracts, ready to be connected to a Keycloak-authenticated backend with minimal changes.

